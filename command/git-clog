#!/bin/bash
#####
# Git Customization Changle Log Output
#####

BASEDIR=$(dirname $0)
export PATH=$BASEDIR/module:$PATH

. array-utils

#  远程仓库地址变量
REMOTE_URL=""
# 项目已有tag数组，如果存在，则以git tag输出的倒序存在
# TAGS=()
declare -a TAGS
AUTHORS=()

VERSION_PARAMETERS=""

function init() {
    verify_param "$@"
    get_all_tag
    get_remote_url ""
    get_all_author "$VERSION_PARAMETERS"
}

#####
# 验证命令参数
#####
function verify_param() {
    PARAM=("$@")
    i=0
    for p in "${PARAM[@]}"; do
        case $p in
            "-v"|"--vesion" )
                echo "$p ${PARAM[$i+1]}"
                if [[ -n "${PARAM[$i+1]}" ]]; then
                    CMD_PARAMETERS=$VERSION_PARAMETERS" --grep '(${PARAM[$i+1]})'"
                fi
                ;;
            "-o"|"--output" )
                    echo "$p ${PARAM[$i+1]}"
                    CMD_PARAMETERS=$CMD_PARAMETERS" > ${PARAM[$i+1]}"
                ;;
        esac
        let i++
    done
}

#####
# 获取远程仓库地址
#####
function get_remote_url() {
    if [[ -n "$1" ]]; then
        ORIGIN="$1"
    else
        ORIGIN=`git remote get-url origin`
    fi
    if [[ "$ORIGIN" == "https"* ]]; then
        REMOTE_URL="${ORIGIN%.*}"
    else
        REMOTE_URL=(`echo "$ORIGIN"|awk -F '[@:]' '{print "https://"$2"/"$3}'`)
        REMOTE_URL=("${REMOTE_URL%.*}")
    fi
}
#####
# 获取当前所有tag
#####
function get_all_tag() {
    i=0
    for tag in  `git tag -l --sort="version:refname"`; do
        tags[$i]="$tag"
        let i++
    done

    TAGS=(`array_sort_desc "${tags[*]}"`)

    for tag in "${TAGS[@]}"; do
        echo "$tag"
    done
    # echo "TAGS length ${#TAGS[*]}"
}

function get_all_author() {
    # 获得所有提交者
    # git shortlog -s -n --all -e --no-merges --grep '(1.2)'
    CMD="git shortlog -s -n --all -e --no-merges"
    if [[ -n "$1" ]]; then
        CMD="$CMD$1"
    fi
    authors=$(eval $CMD)
    # for author in "${authors[@]}"; do
        # {a[NR]=$0}END{for (i=1;i<=NR;i++) if (a[i]~/keyword/) for (j=i-3;j<i;j++) print a[j]}
        # echo "$author"|awk -F ' ' '{ for (i=2;i<NF;i++) {a=a" "$i} $a $NF" ("$1")"}'
        # echo "$author" | awk -F ' ' '{a[NR]=$0}END{for (i=2;i<=NR;i++) print a[i]}'
        # git for-each-ref --sort=taggerdate --format '%(tag)_,,,_%(taggerdate:raw)_,,,_%(taggername)_,,,_%(subject)' refs/tags | awk 'BEGIN { FS = "_,,,_"  } ; { t=strftime("%Y-%m-%d  %H:%M",$2); printf "%-20s %-18s %-25s %s\n", t, $1, $4, $3  }'
    # done
    # CMD="$CMD | awk -F ' ' '{print $2''$1}'"
    # echo "$CMD"
    # eval "$CMD"
}
#####
# 直接输出日志到在终端
#####
function simple_log() {
    LOG_CMD="git shortlog -e --no-merges --pretty=format:'%s [view commit %h](${REMOTE_URL[*]}/commit/%H)'"
    # eval $LOG_CMD
}
#####
# 使用帮助
#####
function help() {
cat <<  EOF
GIT-CLOG(1)

NAME
       git-clog - Git Change Logs Output

SYNOPSIS
       git clog [<options>] [<revision range>] [[--] <path>...]

DESCRIPTION
       Summarizes git log output in a format suitable for inclusion in release announcements. Each commit will be grouped by author and title.

OPTIONS
       -o, --output
           The changelog output to a file.

       -v, --version
           Specify the output one version.
       -h, --help
           Prints the synopsis and a list of the most commonly used commands.
EOF
}
case $1 in
    "-h" | "--help")
        help
        ;;
    * )
        init "$@"
        # simple_log
        exit
        ;;
esac
