#!/bin/bash
#####
# Git Customization Changle Log Output
#####

BASEDIR=$(dirname $0)
export PATH=$BASEDIR/module:$PATH

. array-utils

#  远程仓库地址变量
REMOTE_URL=""
# 项目已有tag数组，如果存在，则以git tag输出的倒序存在
declare -a TAGS
# clog命令参数传入的版本信息
declare -a CURRENT_TAG
# clog命令参数传入的上一个版本信息
declare -a BEFORE_TAG
# 当前命令执行的所有代码作者信息
declare -a AUTHORS

VERSION_PARAMETERS=''

function init() {
    verify_version
    get_all_tag
    verify_param "$@"
    get_remote_url
    get_all_author
}
#####
# 验证当前git的版本是否大于2.1
#####
function verify_version() {
    version=(`git --version|awk -F ' ' '{print $3}'|cut -d '.' -f1 -f2`)
    t=`expr "$version" \>= '2.1'`
    if [[ "$t" -eq "0" ]]; then
        echo "The current Git version is less than 2.1, please upgrade to Git - 2.1 above"
        exit 1
    fi
}
#####
# 验证命令参数
#####
function verify_param() {
    PARAM=("$@")
    i=0
    for p in "${PARAM[@]}"; do
        case $p in
            "-v"|"--vesion" )
                if [[ -n "${PARAM[$i+1]}" ]]; then
                    CURRENT_TAG=(`get_tag "${PARAM[$i+1]}"`)
                    _index="${CURRENT_TAG[0]}"
                    let _index++
                    if [[ $_index < ${#TAGS[*]} ]]; then
                        BEFORE_TAG=(`get_tag ${TAGS[$_index]}`)
                        VERSION_PARAMETERS="${BEFORE_TAG[1]}..${CURRENT_TAG[1]}"
                    else
                        VERSION_PARAMETERS="${CURRENT_TAG[1]}"
                    fi
                    # VERSION_PARAMETERS="${BEFORE_TAG[1]}..${CURRENT_TAG[1]}"
                fi
                ;;
            "-o"|"--output" )
                    echo "$p ${PARAM[$i+1]}"
                    CMD_PARAMETERS=$CMD_PARAMETERS" >> ${PARAM[$i+1]}"
                ;;
        esac
        let i++
    done
}

#####
# 获取远程仓库地址
#####
function get_remote_url() {
    if [[ -n "$1" ]]; then
        ORIGIN="$1"
    else
        ORIGIN=`git remote get-url origin`
    fi
    if [[ "$ORIGIN" == "https"* ]]; then
        REMOTE_URL="${ORIGIN%.*}"
    else
        REMOTE_URL=(`echo "$ORIGIN"|awk -F '[@:]' '{print "https://"$2"/"$3}'`)
        REMOTE_URL=("${REMOTE_URL%.*}")
    fi
}
#####
# 获取当前所有tag
#####
function get_all_tag() {
    i=0
    # git tag -l --sort="version:refname"
    for tag in  `git for-each-ref --sort="version:refname" --format='%(objectname)|%(refname:short)' refs/tags/`; do
        tags[$i]="$tag"
        let i++
    done
    TAGS=(`array_sort_desc "${tags[*]}"`)
    unset tags
    unset i
    unset tag
}
#####
# 获取某个tag信息
#####
function get_tag() {
    _t="$1"
    # 判断输入的版本信息是否包含项目名
    # if [[ $(echo "$1"|grep "-") != "" ]]; then
    if [[ "$1" == *"-"* ]]; then
        _t=`echo $1|awk -F '-' '{print $2}'`
    fi
    for (( i=0; i<${#TAGS[*]};i++)); do
        if [[ "$_t" == "`echo ${TAGS[$i]}|awk -F '[|-]' '{print $3}'`" ]]; then
            tag[0]="$i"
            tag[1]=`echo ${TAGS[$i]}|awk -F '|' '{print $1}'`
            tag[2]=`echo ${TAGS[$i]}|awk -F '|' '{print $2}'`
            tag[3]=`echo ${TAGS[$i]}|awk -F '[|-]' '{print $3}'`
        fi
    done
    echo "${tag[*]}"
}
#####
# 获得所有提交者
#####
function get_all_author() {
    # git shortlog -s -n -e --no-merges 85e76af9..3637d2b8
    _index=0
    while read _line; do
        AUTHORS[$_index]="`get_author "$_line"`"
        let _index++
    done<<EOF
`git shortlog -s -n -e --no-merges $VERSION_PARAMETERS`
EOF
}
###
# 将“751	Tony Deng <wolf.deng@gmail.com>” 这样的格式改成 "Tony Deng <wolf.deng@gmail.com> (751)"
###
function get_author() {
    echo "$1"|awk '{for(i=2;i<=NF;i++)printf $i""FS;print "("$1")"}'
}
#####
# 直接输出日志到在终端
#####
function simple_log() {
    for a in "${AUTHORS[@]}"; do
        _author=`echo "$a"|awk -F '[<\>]' '{print $2}'`
        echo "## $a"
        echo ""
        _cmd="git log --author='${_author}' --no-merges $VERSION_PARAMETERS --pretty=format:'%s (%cr) [view commit %h](${REMOTE_URL[*]}/commit/%h)'"
        if [[ -n "$CMD_PARAMETERS" ]]; then
            _cmd="$_cmd $CMD_PARAMETERS"
        fi
        echo $"$_cmd"
        # eval "$_cmd"
        echo ""
        echo ""
        unset _author
        unset _cmd
    done
}
#####
# 使用帮助
#####
function help() {
cat <<  EOF
GIT-CLOG(1)

NAME
       git-clog - Git Change Logs Output

SYNOPSIS
       git clog [<options>] [<revision range>] [[--] <path>...]

DESCRIPTION
       Summarizes git log output in a format suitable for inclusion in release announcements. Each commit will be grouped by author and title.

OPTIONS
       -o, --output
           The changelog output to a file.

       -v, --version
           Specify the output one version.
       -h, --help
           Prints the synopsis and a list of the most commonly used commands.
EOF
}
case $1 in
    "-h" | "--help")
        help
        ;;
    * )
        init "$@"
        simple_log
        exit
        ;;
esac
